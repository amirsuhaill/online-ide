import {
  __commonJS,
  __toESM,
  require_react
} from "./chunk-I4MZPW7S.js";

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/is-retina/index.js
var require_is_retina = __commonJS({
  "node_modules/is-retina/index.js"(exports, module) {
    module.exports = function() {
      var mediaQuery;
      if (typeof window !== "undefined" && window !== null) {
        mediaQuery = "(-webkit-min-device-pixel-ratio: 1.25), (min--moz-device-pixel-ratio: 1.25), (-o-min-device-pixel-ratio: 5/4), (min-resolution: 1.25dppx)";
        if (window.devicePixelRatio > 1.25) {
          return true;
        }
        if (window.matchMedia && window.matchMedia(mediaQuery).matches) {
          return true;
        }
      }
      return false;
    };
  }
});

// node_modules/crypt/crypt.js
var require_crypt = __commonJS({
  "node_modules/crypt/crypt.js"(exports, module) {
    (function() {
      var base64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", crypt = {
        // Bit-wise rotation left
        rotl: function(n, b) {
          return n << b | n >>> 32 - b;
        },
        // Bit-wise rotation right
        rotr: function(n, b) {
          return n << 32 - b | n >>> b;
        },
        // Swap big-endian to little-endian and vice versa
        endian: function(n) {
          if (n.constructor == Number) {
            return crypt.rotl(n, 8) & 16711935 | crypt.rotl(n, 24) & 4278255360;
          }
          for (var i = 0; i < n.length; i++)
            n[i] = crypt.endian(n[i]);
          return n;
        },
        // Generate an array of any length of random bytes
        randomBytes: function(n) {
          for (var bytes = []; n > 0; n--)
            bytes.push(Math.floor(Math.random() * 256));
          return bytes;
        },
        // Convert a byte array to big-endian 32-bit words
        bytesToWords: function(bytes) {
          for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)
            words[b >>> 5] |= bytes[i] << 24 - b % 32;
          return words;
        },
        // Convert big-endian 32-bit words to a byte array
        wordsToBytes: function(words) {
          for (var bytes = [], b = 0; b < words.length * 32; b += 8)
            bytes.push(words[b >>> 5] >>> 24 - b % 32 & 255);
          return bytes;
        },
        // Convert a byte array to a hex string
        bytesToHex: function(bytes) {
          for (var hex = [], i = 0; i < bytes.length; i++) {
            hex.push((bytes[i] >>> 4).toString(16));
            hex.push((bytes[i] & 15).toString(16));
          }
          return hex.join("");
        },
        // Convert a hex string to a byte array
        hexToBytes: function(hex) {
          for (var bytes = [], c = 0; c < hex.length; c += 2)
            bytes.push(parseInt(hex.substr(c, 2), 16));
          return bytes;
        },
        // Convert a byte array to a base-64 string
        bytesToBase64: function(bytes) {
          for (var base64 = [], i = 0; i < bytes.length; i += 3) {
            var triplet = bytes[i] << 16 | bytes[i + 1] << 8 | bytes[i + 2];
            for (var j = 0; j < 4; j++)
              if (i * 8 + j * 6 <= bytes.length * 8)
                base64.push(base64map.charAt(triplet >>> 6 * (3 - j) & 63));
              else
                base64.push("=");
          }
          return base64.join("");
        },
        // Convert a base-64 string to a byte array
        base64ToBytes: function(base64) {
          base64 = base64.replace(/[^A-Z0-9+\/]/ig, "");
          for (var bytes = [], i = 0, imod4 = 0; i < base64.length; imod4 = ++i % 4) {
            if (imod4 == 0) continue;
            bytes.push((base64map.indexOf(base64.charAt(i - 1)) & Math.pow(2, -2 * imod4 + 8) - 1) << imod4 * 2 | base64map.indexOf(base64.charAt(i)) >>> 6 - imod4 * 2);
          }
          return bytes;
        }
      };
      module.exports = crypt;
    })();
  }
});

// node_modules/charenc/charenc.js
var require_charenc = __commonJS({
  "node_modules/charenc/charenc.js"(exports, module) {
    var charenc = {
      // UTF-8 encoding
      utf8: {
        // Convert a string to a byte array
        stringToBytes: function(str) {
          return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));
        },
        // Convert a byte array to a string
        bytesToString: function(bytes) {
          return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));
        }
      },
      // Binary encoding
      bin: {
        // Convert a string to a byte array
        stringToBytes: function(str) {
          for (var bytes = [], i = 0; i < str.length; i++)
            bytes.push(str.charCodeAt(i) & 255);
          return bytes;
        },
        // Convert a byte array to a string
        bytesToString: function(bytes) {
          for (var str = [], i = 0; i < bytes.length; i++)
            str.push(String.fromCharCode(bytes[i]));
          return str.join("");
        }
      }
    };
    module.exports = charenc;
  }
});

// node_modules/is-buffer/index.js
var require_is_buffer = __commonJS({
  "node_modules/is-buffer/index.js"(exports, module) {
    module.exports = function(obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
    };
    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    }
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
    }
  }
});

// node_modules/md5/md5.js
var require_md5 = __commonJS({
  "node_modules/md5/md5.js"(exports, module) {
    (function() {
      var crypt = require_crypt(), utf8 = require_charenc().utf8, isBuffer = require_is_buffer(), bin = require_charenc().bin, md52 = function(message, options) {
        if (message.constructor == String)
          if (options && options.encoding === "binary")
            message = bin.stringToBytes(message);
          else
            message = utf8.stringToBytes(message);
        else if (isBuffer(message))
          message = Array.prototype.slice.call(message, 0);
        else if (!Array.isArray(message) && message.constructor !== Uint8Array)
          message = message.toString();
        var m = crypt.bytesToWords(message), l = message.length * 8, a = 1732584193, b = -271733879, c = -1732584194, d = 271733878;
        for (var i = 0; i < m.length; i++) {
          m[i] = (m[i] << 8 | m[i] >>> 24) & 16711935 | (m[i] << 24 | m[i] >>> 8) & 4278255360;
        }
        m[l >>> 5] |= 128 << l % 32;
        m[(l + 64 >>> 9 << 4) + 14] = l;
        var FF = md52._ff, GG = md52._gg, HH = md52._hh, II = md52._ii;
        for (var i = 0; i < m.length; i += 16) {
          var aa = a, bb = b, cc = c, dd = d;
          a = FF(a, b, c, d, m[i + 0], 7, -680876936);
          d = FF(d, a, b, c, m[i + 1], 12, -389564586);
          c = FF(c, d, a, b, m[i + 2], 17, 606105819);
          b = FF(b, c, d, a, m[i + 3], 22, -1044525330);
          a = FF(a, b, c, d, m[i + 4], 7, -176418897);
          d = FF(d, a, b, c, m[i + 5], 12, 1200080426);
          c = FF(c, d, a, b, m[i + 6], 17, -1473231341);
          b = FF(b, c, d, a, m[i + 7], 22, -45705983);
          a = FF(a, b, c, d, m[i + 8], 7, 1770035416);
          d = FF(d, a, b, c, m[i + 9], 12, -1958414417);
          c = FF(c, d, a, b, m[i + 10], 17, -42063);
          b = FF(b, c, d, a, m[i + 11], 22, -1990404162);
          a = FF(a, b, c, d, m[i + 12], 7, 1804603682);
          d = FF(d, a, b, c, m[i + 13], 12, -40341101);
          c = FF(c, d, a, b, m[i + 14], 17, -1502002290);
          b = FF(b, c, d, a, m[i + 15], 22, 1236535329);
          a = GG(a, b, c, d, m[i + 1], 5, -165796510);
          d = GG(d, a, b, c, m[i + 6], 9, -1069501632);
          c = GG(c, d, a, b, m[i + 11], 14, 643717713);
          b = GG(b, c, d, a, m[i + 0], 20, -373897302);
          a = GG(a, b, c, d, m[i + 5], 5, -701558691);
          d = GG(d, a, b, c, m[i + 10], 9, 38016083);
          c = GG(c, d, a, b, m[i + 15], 14, -660478335);
          b = GG(b, c, d, a, m[i + 4], 20, -405537848);
          a = GG(a, b, c, d, m[i + 9], 5, 568446438);
          d = GG(d, a, b, c, m[i + 14], 9, -1019803690);
          c = GG(c, d, a, b, m[i + 3], 14, -187363961);
          b = GG(b, c, d, a, m[i + 8], 20, 1163531501);
          a = GG(a, b, c, d, m[i + 13], 5, -1444681467);
          d = GG(d, a, b, c, m[i + 2], 9, -51403784);
          c = GG(c, d, a, b, m[i + 7], 14, 1735328473);
          b = GG(b, c, d, a, m[i + 12], 20, -1926607734);
          a = HH(a, b, c, d, m[i + 5], 4, -378558);
          d = HH(d, a, b, c, m[i + 8], 11, -2022574463);
          c = HH(c, d, a, b, m[i + 11], 16, 1839030562);
          b = HH(b, c, d, a, m[i + 14], 23, -35309556);
          a = HH(a, b, c, d, m[i + 1], 4, -1530992060);
          d = HH(d, a, b, c, m[i + 4], 11, 1272893353);
          c = HH(c, d, a, b, m[i + 7], 16, -155497632);
          b = HH(b, c, d, a, m[i + 10], 23, -1094730640);
          a = HH(a, b, c, d, m[i + 13], 4, 681279174);
          d = HH(d, a, b, c, m[i + 0], 11, -358537222);
          c = HH(c, d, a, b, m[i + 3], 16, -722521979);
          b = HH(b, c, d, a, m[i + 6], 23, 76029189);
          a = HH(a, b, c, d, m[i + 9], 4, -640364487);
          d = HH(d, a, b, c, m[i + 12], 11, -421815835);
          c = HH(c, d, a, b, m[i + 15], 16, 530742520);
          b = HH(b, c, d, a, m[i + 2], 23, -995338651);
          a = II(a, b, c, d, m[i + 0], 6, -198630844);
          d = II(d, a, b, c, m[i + 7], 10, 1126891415);
          c = II(c, d, a, b, m[i + 14], 15, -1416354905);
          b = II(b, c, d, a, m[i + 5], 21, -57434055);
          a = II(a, b, c, d, m[i + 12], 6, 1700485571);
          d = II(d, a, b, c, m[i + 3], 10, -1894986606);
          c = II(c, d, a, b, m[i + 10], 15, -1051523);
          b = II(b, c, d, a, m[i + 1], 21, -2054922799);
          a = II(a, b, c, d, m[i + 8], 6, 1873313359);
          d = II(d, a, b, c, m[i + 15], 10, -30611744);
          c = II(c, d, a, b, m[i + 6], 15, -1560198380);
          b = II(b, c, d, a, m[i + 13], 21, 1309151649);
          a = II(a, b, c, d, m[i + 4], 6, -145523070);
          d = II(d, a, b, c, m[i + 11], 10, -1120210379);
          c = II(c, d, a, b, m[i + 2], 15, 718787259);
          b = II(b, c, d, a, m[i + 9], 21, -343485551);
          a = a + aa >>> 0;
          b = b + bb >>> 0;
          c = c + cc >>> 0;
          d = d + dd >>> 0;
        }
        return crypt.endian([a, b, c, d]);
      };
      md52._ff = function(a, b, c, d, x, s, t) {
        var n = a + (b & c | ~b & d) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md52._gg = function(a, b, c, d, x, s, t) {
        var n = a + (b & d | c & ~d) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md52._hh = function(a, b, c, d, x, s, t) {
        var n = a + (b ^ c ^ d) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md52._ii = function(a, b, c, d, x, s, t) {
        var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;
        return (n << s | n >>> 32 - s) + b;
      };
      md52._blocksize = 16;
      md52._digestsize = 16;
      module.exports = function(message, options) {
        if (message === void 0 || message === null)
          throw new Error("Illegal argument " + message);
        var digestbytes = crypt.wordsToBytes(md52(message, options));
        return options && options.asBytes ? digestbytes : options && options.asString ? bin.bytesToString(digestbytes) : crypt.bytesToHex(digestbytes);
      };
    })();
  }
});

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

// node_modules/react-avatar/es/avatar.js
var import_react6 = __toESM(require_react());

// node_modules/react-avatar/es/cache.js
var CACHE_PREFIX = "react-avatar/";
var CACHE_KEY_FAILING = "failing";
var _hasLocalStorage = (function isLocalStorageAvailable() {
  try {
    return "localStorage" in window && window["localStorage"];
  } catch (err) {
    return false;
  }
})();
var Cache = class {
  constructor() {
    let options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    const {
      cachePrefix = CACHE_PREFIX,
      sourceTTL = 7 * 24 * 3600 * 1e3,
      sourceSize = 20
    } = options;
    this.cachePrefix = cachePrefix;
    this.sourceTTL = sourceTTL;
    this.sourceSize = sourceSize;
  }
  set(key, value) {
    if (!_hasLocalStorage) return;
    value = JSON.stringify(value);
    try {
      localStorage.setItem(this.cachePrefix + key, value);
    } catch (e) {
      console.error(e);
    }
  }
  get(key) {
    if (!_hasLocalStorage) return null;
    const value = localStorage.getItem(this.cachePrefix + key);
    if (value) return JSON.parse(value);
    return null;
  }
  sourceFailed(source) {
    let cacheList = this.get(CACHE_KEY_FAILING) || [];
    cacheList = cacheList.filter((entry) => {
      const hasExpired = entry.expires > 0 && entry.expires < Date.now();
      const isMatch = entry === source || entry.url == source;
      return !hasExpired && !isMatch;
    });
    cacheList.unshift({
      url: source,
      expires: Date.now() + this.sourceTTL
    });
    cacheList = cacheList.slice(0, this.sourceSize - 1);
    return this.set(CACHE_KEY_FAILING, cacheList);
  }
  hasSourceFailedBefore(source) {
    const cacheList = this.get(CACHE_KEY_FAILING) || [];
    return cacheList.some((entry) => {
      const hasExpired = entry.expires > 0 && entry.expires < Date.now();
      const isMatch = entry === source || entry.url == source;
      return isMatch && !hasExpired;
    });
  }
};
var cache_default = new Cache();

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e[r] = t, e;
}

// node_modules/react-avatar/es/context.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/react-avatar/es/utils.js
var import_is_retina = __toESM(require_is_retina());
var IS_RETINA = (0, import_is_retina.default)();
var defaultColors = ["#A62A21", "#7e3794", "#0B51C1", "#3A6024", "#A81563", "#B3003C"];
var reSize = /^([-+]?(?:\d+(?:\.\d+)?|\.\d+))([a-z]{2,4}|%)?$/;
function _stringAsciiPRNG(value, m) {
  const charCodes = [...value].map((letter) => letter.charCodeAt(0));
  const len = charCodes.length;
  const a = len % (m - 1) + 1;
  const c = charCodes.reduce((current, next) => current + next) % m;
  let random = charCodes[0] % m;
  for (let i = 0; i < len; i++) random = (a * random + c) % m;
  return random;
}
function getRandomColor(value) {
  let colors = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultColors;
  if (!value) return "transparent";
  const colorIndex = _stringAsciiPRNG(value, colors.length);
  return colors[colorIndex];
}
function parseSize(size) {
  size = "" + size;
  const [, value = 0, unit = "px"] = reSize.exec(size) || [];
  return {
    value: parseFloat(value),
    str: value + unit,
    unit
  };
}
function getImageSize(size) {
  size = parseSize(size);
  if (isNaN(size.value))
    size = 512;
  else if (size.unit === "px")
    size = size.value;
  else if (size.value === 0)
    size = 0;
  else
    size = 512;
  if (IS_RETINA) size = size * 2;
  return size;
}
function defaultInitials(name, _ref) {
  let {
    maxInitials
  } = _ref;
  return name.split(/\s/).map((part) => part.substring(0, 1).toUpperCase()).filter((v) => !!v).slice(0, maxInitials).join("").toUpperCase();
}
var timeoutGroups = {};
function setGroupedTimeout(fn, ttl) {
  if (timeoutGroups[ttl]) {
    timeoutGroups[ttl].push(fn);
    return;
  }
  const callbacks = timeoutGroups[ttl] = [fn];
  setTimeout(() => {
    delete timeoutGroups[ttl];
    callbacks.forEach((cb) => cb());
  }, ttl);
}
function getNullableText() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  for (const arg of args) {
    if (arg || arg === "") return arg;
    if (arg === false || arg === null) return null;
  }
  return;
}
function calculateBorderRadius(round) {
  if (round === true) return "100%";
  if (round === false) return;
  return round;
}

// node_modules/react-avatar/es/context.js
var defaults = {
  cache: cache_default,
  colors: defaultColors,
  initials: defaultInitials,
  avatarRedirectUrl: null
};
var contextKeys = Object.keys(defaults);
var ConfigContext = import_react.default.createContext && import_react.default.createContext();
var isLegacyContext = !ConfigContext;
var ConfigConsumer = isLegacyContext ? null : ConfigContext.Consumer;
var forwardRef = import_react.default.forwardRef || ((C) => C);
var ConfigProvider = class extends import_react.default.Component {
  _getContext() {
    const context = {};
    contextKeys.forEach((key) => {
      if (typeof this.props[key] !== "undefined") context[key] = this.props[key];
    });
    return context;
  }
  render() {
    const {
      children
    } = this.props;
    if (isLegacyContext) return import_react.default.Children.only(children);
    return import_react.default.createElement(ConfigContext.Provider, {
      value: this._getContext()
    }, import_react.default.Children.only(children));
  }
};
_defineProperty(ConfigProvider, "displayName", "ConfigProvider");
_defineProperty(ConfigProvider, "propTypes", {
  cache: import_prop_types.default.object,
  colors: import_prop_types.default.arrayOf(import_prop_types.default.string),
  initials: import_prop_types.default.func,
  avatarRedirectUrl: import_prop_types.default.string,
  children: import_prop_types.default.node
});
var withConfig = (Component) => {
  function withAvatarConfig(props, refOrContext) {
    if (isLegacyContext) {
      const ctx = refOrContext && refOrContext.reactAvatar;
      return import_react.default.createElement(Component, _extends({}, defaults, ctx, props));
    }
    return import_react.default.createElement(ConfigConsumer, null, (config) => import_react.default.createElement(Component, _extends({
      ref: refOrContext
    }, defaults, config, props)));
  }
  withAvatarConfig.contextTypes = ConfigProvider.childContextTypes;
  return forwardRef(withAvatarConfig);
};
if (isLegacyContext) {
  ConfigProvider.childContextTypes = {
    reactAvatar: import_prop_types.default.object
  };
  ConfigProvider.prototype.getChildContext = function() {
    return {
      reactAvatar: this._getContext()
    };
  };
}

// node_modules/react-avatar/es/data-provider.js
var import_react2 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());

// node_modules/react-avatar/es/internal-state.js
var InternalState = class {
  constructor() {
    this.sourcePointer = 0;
    this.active = true;
    this.fetch = null;
  }
  isActive() {
    let state = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (state.internal !== this) return false;
    if (!this.fetch) return false;
    if (this.active !== true) return false;
    return true;
  }
};

// node_modules/react-avatar/es/data-provider.js
function matchSource(Source, props, cb) {
  const {
    cache
  } = props;
  const instance = new Source(props);
  if (!instance.isCompatible(props)) return cb();
  instance.get((state) => {
    const failedBefore = state && state.src && cache.hasSourceFailedBefore(state.src);
    if (!failedBefore && state) {
      cb(state);
    } else {
      cb();
    }
  });
}
function createAvatarDataProvider(_ref) {
  let {
    sources = []
  } = _ref;
  const sourcePropTypes = sources.reduce((r, s) => Object.assign(r, s.propTypes), {});
  class AvatarDataProvider extends import_react2.PureComponent {
    constructor(props) {
      super(props);
      _defineProperty(this, "_createFetcher", (internal) => (errEvent) => {
        const {
          cache
        } = this.props;
        if (!internal.isActive(this.state)) return;
        if (errEvent && errEvent.type === "error") cache.sourceFailed(errEvent.target.src);
        const pointer = internal.sourcePointer;
        if (sources.length === pointer) return;
        const source = sources[pointer];
        internal.sourcePointer++;
        matchSource(source, this.props, (nextState) => {
          if (!nextState) return setTimeout(internal.fetch, 0);
          if (!internal.isActive(this.state)) return;
          nextState = {
            src: null,
            value: null,
            color: null,
            ...nextState
          };
          this.setState((state) => {
            return internal.isActive(state) ? nextState : {};
          });
        });
      });
      _defineProperty(this, "fetch", () => {
        const internal = new InternalState();
        internal.fetch = this._createFetcher(internal);
        this.setState({
          internal
        }, internal.fetch);
      });
      this.state = {
        internal: null,
        src: null,
        value: null,
        color: props.color
      };
    }
    componentDidMount() {
      this.fetch();
    }
    componentDidUpdate(prevProps) {
      let needsUpdate = false;
      for (const prop in sourcePropTypes) needsUpdate = needsUpdate || prevProps[prop] !== this.props[prop];
      if (needsUpdate) setTimeout(this.fetch, 0);
    }
    componentWillUnmount() {
      if (this.state.internal) {
        this.state.internal.active = false;
      }
    }
    render() {
      const {
        children,
        propertyName
      } = this.props;
      const {
        src,
        value,
        color,
        sourceName,
        internal
      } = this.state;
      const avatarData = {
        src,
        value,
        color,
        sourceName,
        onRenderFailed: () => internal && internal.fetch()
        // eslint-disable-line
      };
      if (typeof children === "function") return children(avatarData);
      const child = import_react2.default.Children.only(children);
      return import_react2.default.cloneElement(child, {
        [propertyName]: avatarData
      });
    }
  }
  _defineProperty(AvatarDataProvider, "displayName", "AvatarDataProvider");
  _defineProperty(AvatarDataProvider, "propTypes", {
    // PropTypes defined on sources
    ...sourcePropTypes,
    cache: import_prop_types2.default.object,
    propertyName: import_prop_types2.default.string
  });
  _defineProperty(AvatarDataProvider, "defaultProps", {
    propertyName: "avatar"
  });
  _defineProperty(AvatarDataProvider, "Cache", Cache);
  _defineProperty(AvatarDataProvider, "ConfigProvider", ConfigProvider);
  return Object.assign(withConfig(AvatarDataProvider), {
    ConfigProvider,
    Cache
  });
}

// node_modules/react-avatar/es/components/image.js
var import_react4 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());

// node_modules/react-avatar/es/components/wrapper.js
var import_react3 = __toESM(require_react());
var import_prop_types3 = __toESM(require_prop_types());
var AvatarWrapper = class extends import_react3.default.PureComponent {
  render() {
    const {
      className,
      unstyled,
      round,
      style,
      avatar,
      onClick,
      children
    } = this.props;
    const {
      sourceName
    } = avatar;
    const size = parseSize(this.props.size);
    const hostStyle = unstyled ? null : {
      display: "inline-block",
      verticalAlign: "middle",
      width: size.str,
      height: size.str,
      borderRadius: calculateBorderRadius(round),
      fontFamily: "Helvetica, Arial, sans-serif",
      ...style
    };
    const classNames = [className, "sb-avatar"];
    if (sourceName) {
      const source = sourceName.toLowerCase().replace(/[^a-z0-9-]+/g, "-").replace(/^-+|-+$/g, "");
      classNames.push("sb-avatar--" + source);
    }
    return import_react3.default.createElement("div", {
      className: classNames.join(" "),
      onClick,
      style: hostStyle
    }, children);
  }
};
_defineProperty(AvatarWrapper, "propTypes", {
  className: import_prop_types3.default.string,
  round: import_prop_types3.default.oneOfType([import_prop_types3.default.bool, import_prop_types3.default.string]),
  style: import_prop_types3.default.object,
  size: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]),
  unstyled: import_prop_types3.default.bool,
  avatar: import_prop_types3.default.object,
  onClick: import_prop_types3.default.func,
  children: import_prop_types3.default.node
});

// node_modules/react-avatar/es/components/image.js
var AvatarImage = class extends import_react4.default.PureComponent {
  render() {
    const {
      className,
      round,
      unstyled,
      alt,
      title,
      name,
      value,
      avatar
    } = this.props;
    const size = parseSize(this.props.size);
    const imageStyle = unstyled ? null : {
      maxWidth: "100%",
      width: size.str,
      height: size.str,
      borderRadius: calculateBorderRadius(round)
    };
    return import_react4.default.createElement(AvatarWrapper, this.props, import_react4.default.createElement("img", {
      className: className + " sb-avatar__image",
      width: size.str,
      height: size.str,
      style: imageStyle,
      src: avatar.src,
      alt: getNullableText(alt, name || value),
      title: getNullableText(title, name || value),
      onError: avatar.onRenderFailed
    }));
  }
};
_defineProperty(AvatarImage, "propTypes", {
  alt: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.bool]),
  title: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.bool]),
  name: import_prop_types4.default.string,
  value: import_prop_types4.default.string,
  avatar: import_prop_types4.default.object,
  className: import_prop_types4.default.string,
  unstyled: import_prop_types4.default.bool,
  round: import_prop_types4.default.oneOfType([import_prop_types4.default.bool, import_prop_types4.default.string, import_prop_types4.default.number]),
  size: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string])
});
_defineProperty(AvatarImage, "defaultProps", {
  className: "",
  round: false,
  size: 100,
  unstyled: false
});

// node_modules/react-avatar/es/components/text.js
var import_react5 = __toESM(require_react());
var import_prop_types5 = __toESM(require_prop_types());
var AvatarText = class extends import_react5.default.PureComponent {
  constructor() {
    var _this;
    super(...arguments);
    _this = this;
    _defineProperty(this, "_scaleTextNode", function(node) {
      let retryTTL = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 16;
      const {
        unstyled,
        textSizeRatio,
        textMarginRatio,
        avatar
      } = _this.props;
      _this._node = node;
      if (!node || !node.parentNode || unstyled || avatar.src || !_this._mounted) return;
      const spanNode = node.parentNode;
      const tableNode = spanNode.parentNode;
      const {
        width: containerWidth,
        height: containerHeight
      } = spanNode.getBoundingClientRect();
      if (containerWidth == 0 && containerHeight == 0) {
        const ttl = Math.min(retryTTL * 1.5, 500);
        setGroupedTimeout(() => _this._scaleTextNode(node, ttl), ttl);
        return;
      }
      if (!tableNode.style.fontSize) {
        const baseFontSize = containerHeight / textSizeRatio;
        tableNode.style.fontSize = "".concat(baseFontSize, "px");
      }
      spanNode.style.fontSize = null;
      const {
        width: textWidth
      } = node.getBoundingClientRect();
      if (textWidth < 0) return;
      const maxTextWidth = containerWidth * (1 - 2 * textMarginRatio);
      if (textWidth > maxTextWidth) spanNode.style.fontSize = "calc(1em * ".concat(maxTextWidth / textWidth, ")");
    });
  }
  componentDidMount() {
    this._mounted = true;
    this._scaleTextNode(this._node);
  }
  componentWillUnmount() {
    this._mounted = false;
  }
  render() {
    const {
      className,
      round,
      unstyled,
      title,
      name,
      value,
      avatar
    } = this.props;
    const size = parseSize(this.props.size);
    const initialsStyle = unstyled ? null : {
      width: size.str,
      height: size.str,
      lineHeight: "initial",
      textAlign: "center",
      color: this.props.fgColor,
      background: avatar.color,
      borderRadius: calculateBorderRadius(round)
    };
    const tableStyle = unstyled ? null : {
      display: "table",
      tableLayout: "fixed",
      width: "100%",
      height: "100%"
    };
    const spanStyle = unstyled ? null : {
      display: "table-cell",
      verticalAlign: "middle",
      fontSize: "100%",
      whiteSpace: "nowrap"
    };
    const key = [avatar.value, this.props.size].join("");
    return import_react5.default.createElement(AvatarWrapper, this.props, import_react5.default.createElement("div", {
      className: className + " sb-avatar__text",
      style: initialsStyle,
      title: getNullableText(title, name || value)
    }, import_react5.default.createElement("div", {
      style: tableStyle
    }, import_react5.default.createElement("span", {
      style: spanStyle
    }, import_react5.default.createElement("span", {
      ref: this._scaleTextNode,
      key
    }, avatar.value)))));
  }
};
_defineProperty(AvatarText, "propTypes", {
  name: import_prop_types5.default.string,
  value: import_prop_types5.default.string,
  avatar: import_prop_types5.default.object,
  title: import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.bool]),
  className: import_prop_types5.default.string,
  unstyled: import_prop_types5.default.bool,
  fgColor: import_prop_types5.default.string,
  textSizeRatio: import_prop_types5.default.number,
  textMarginRatio: import_prop_types5.default.number,
  round: import_prop_types5.default.oneOfType([import_prop_types5.default.bool, import_prop_types5.default.string, import_prop_types5.default.number]),
  size: import_prop_types5.default.oneOfType([import_prop_types5.default.number, import_prop_types5.default.string])
});
_defineProperty(AvatarText, "defaultProps", {
  className: "",
  fgColor: "#FFF",
  round: false,
  size: 100,
  textSizeRatio: 3,
  textMarginRatio: 0.15,
  unstyled: false
});

// node_modules/react-avatar/es/avatar.js
function createAvatarComponent(options) {
  const DataProvider = createAvatarDataProvider(options);
  const Component = withConfig(
    // eslint-disable-next-line react/display-name
    import_react6.default.forwardRef((props, ref) => import_react6.default.createElement(DataProvider, _extends({}, props, {
      propertyName: "avatar"
    }), (avatar) => {
      const Avatar = avatar.src ? AvatarImage : AvatarText;
      return import_react6.default.createElement(Avatar, _extends({}, props, {
        avatar,
        ref
      }));
    }))
  );
  return Object.assign(Component, {
    getRandomColor,
    ConfigProvider,
    Cache
  });
}

// node_modules/react-avatar/es/sources/Gravatar.js
var import_prop_types6 = __toESM(require_prop_types());
var import_md5 = __toESM(require_md5());
var GravatarSource = class {
  constructor(_props) {
    _defineProperty(this, "props", null);
    _defineProperty(this, "isCompatible", () => {
      return !!this.props.email || !!this.props.md5Email;
    });
    _defineProperty(this, "get", (setState) => {
      const {
        props
      } = this;
      const email = props.md5Email || (0, import_md5.default)(props.email);
      const size = getImageSize(props.size);
      let url = "https://secure.gravatar.com/avatar/".concat(email, "?d=404");
      if (size) url += "&s=".concat(size);
      setState({
        sourceName: "gravatar",
        src: url
      });
    });
    this.props = _props;
  }
};
_defineProperty(GravatarSource, "propTypes", {
  email: import_prop_types6.default.string,
  md5Email: import_prop_types6.default.string
});

// node_modules/react-avatar/es/sources/Facebook.js
var import_prop_types7 = __toESM(require_prop_types());
var FacebookSource = class {
  constructor(props) {
    _defineProperty(this, "props", null);
    _defineProperty(this, "isCompatible", () => !!this.props.facebookId);
    _defineProperty(this, "get", (setState) => {
      const {
        facebookId
      } = this.props;
      const size = getImageSize(this.props.size);
      let url = "https://graph.facebook.com/".concat(facebookId, "/picture");
      if (size) url += "?width=".concat(size, "&height=").concat(size);
      setState({
        sourceName: "facebook",
        src: url
      });
    });
    this.props = props;
  }
};
_defineProperty(FacebookSource, "propTypes", {
  facebookId: import_prop_types7.default.string
});

// node_modules/react-avatar/es/sources/Github.js
var import_prop_types8 = __toESM(require_prop_types());
var GithubSource = class {
  constructor(props) {
    _defineProperty(this, "props", null);
    _defineProperty(this, "isCompatible", () => !!this.props.githubHandle);
    _defineProperty(this, "get", (setState) => {
      const {
        githubHandle
      } = this.props;
      const size = getImageSize(this.props.size);
      let url = "https://avatars.githubusercontent.com/".concat(githubHandle, "?v=4");
      if (size) url += "&s=".concat(size);
      setState({
        sourceName: "github",
        src: url
      });
    });
    this.props = props;
  }
};
_defineProperty(GithubSource, "propTypes", {
  githubHandle: import_prop_types8.default.string
});

// node_modules/react-avatar/es/sources/Skype.js
var import_prop_types9 = __toESM(require_prop_types());
var SkypeSource = class {
  constructor(props) {
    _defineProperty(this, "props", null);
    _defineProperty(this, "isCompatible", () => !!this.props.skypeId);
    _defineProperty(this, "get", (setState) => {
      const {
        skypeId
      } = this.props;
      const url = "https://api.skype.com/users/".concat(skypeId, "/profile/avatar");
      setState({
        sourceName: "skype",
        src: url
      });
    });
    this.props = props;
  }
};
_defineProperty(SkypeSource, "propTypes", {
  skypeId: import_prop_types9.default.string
});

// node_modules/react-avatar/es/sources/Value.js
var import_prop_types10 = __toESM(require_prop_types());
var ValueSource = class {
  constructor(props) {
    _defineProperty(this, "props", null);
    _defineProperty(this, "isCompatible", () => {
      return !!(this.props.name || this.props.value || this.props.email);
    });
    _defineProperty(this, "get", (setState) => {
      const value = this.getValue();
      if (!value) return setState(null);
      setState({
        sourceName: "text",
        value,
        color: this.getColor()
      });
    });
    this.props = props;
  }
  getInitials() {
    const {
      name,
      initials
    } = this.props;
    if (typeof initials === "string") return initials;
    if (typeof initials === "function") return initials(name, this.props);
    return defaultInitials(name, this.props);
  }
  getValue() {
    if (this.props.name) return this.getInitials();
    if (this.props.value) return this.props.value;
    return null;
  }
  getColor() {
    const {
      color,
      colors,
      name,
      email,
      value
    } = this.props;
    const colorValue = name || email || value;
    return color || getRandomColor(colorValue, colors);
  }
};
_defineProperty(ValueSource, "propTypes", {
  color: import_prop_types10.default.string,
  name: import_prop_types10.default.string,
  value: import_prop_types10.default.string,
  email: import_prop_types10.default.string,
  maxInitials: import_prop_types10.default.number,
  initials: import_prop_types10.default.oneOfType([import_prop_types10.default.string, import_prop_types10.default.func])
});

// node_modules/react-avatar/es/sources/Src.js
var import_prop_types11 = __toESM(require_prop_types());
var SrcSource = class {
  constructor(props) {
    _defineProperty(this, "props", null);
    _defineProperty(this, "isCompatible", () => !!this.props.src);
    _defineProperty(this, "get", (setState) => {
      setState({
        sourceName: "src",
        src: this.props.src
      });
    });
    this.props = props;
  }
};
_defineProperty(SrcSource, "propTypes", {
  src: import_prop_types11.default.string
});

// node_modules/react-avatar/es/sources/Icon.js
var import_prop_types12 = __toESM(require_prop_types());
var IconSource = class {
  constructor(props) {
    _defineProperty(this, "props", null);
    _defineProperty(this, "icon", "✷");
    _defineProperty(this, "isCompatible", () => true);
    _defineProperty(this, "get", (setState) => {
      const {
        color,
        colors
      } = this.props;
      setState({
        sourceName: "icon",
        value: this.icon,
        color: color || getRandomColor(this.icon, colors)
      });
    });
    this.props = props;
  }
};
_defineProperty(IconSource, "propTypes", {
  color: import_prop_types12.default.string
});

// node_modules/react-avatar/es/sources/AvatarRedirect.js
var import_prop_types13 = __toESM(require_prop_types());
function createRedirectSource(network, property) {
  var _AvatarRedirectSource;
  return _AvatarRedirectSource = class AvatarRedirectSource {
    constructor(props) {
      _defineProperty(this, "props", null);
      _defineProperty(this, "isCompatible", () => {
        return !!this.props.avatarRedirectUrl && !!this.props[property];
      });
      _defineProperty(this, "get", (setState) => {
        const {
          avatarRedirectUrl
        } = this.props;
        const size = getImageSize(this.props.size);
        const baseUrl = avatarRedirectUrl.replace(/\/*$/, "/");
        const id = this.props[property];
        const query = size ? "size=".concat(size) : "";
        const src = "".concat(baseUrl).concat(network, "/").concat(id, "?").concat(query);
        setState({
          sourceName: network,
          src
        });
      });
      this.props = props;
    }
  }, _defineProperty(_AvatarRedirectSource, "propTypes", {
    [property]: import_prop_types13.default.oneOfType([import_prop_types13.default.string, import_prop_types13.default.number])
  }), _AvatarRedirectSource;
}

// node_modules/react-avatar/es/sources/Twitter.js
var Twitter_default = createRedirectSource("twitter", "twitterHandle");

// node_modules/react-avatar/es/sources/VKontakte.js
var VKontakte_default = createRedirectSource("vkontakte", "vkontakteId");

// node_modules/react-avatar/es/sources/Instagram.js
var Instagram_default = createRedirectSource("instagram", "instagramId");

// node_modules/react-avatar/es/sources/Google.js
var Google_default = createRedirectSource("google", "googleId");

// node_modules/react-avatar/es/index.js
var SOURCES = [FacebookSource, Google_default, GithubSource, Twitter_default, Instagram_default, VKontakte_default, SkypeSource, GravatarSource, SrcSource, ValueSource, IconSource];
var es_default = createAvatarComponent({
  sources: SOURCES
});
export {
  Cache,
  ConfigProvider,
  FacebookSource,
  GithubSource,
  Google_default as GoogleSource,
  GravatarSource,
  IconSource,
  Instagram_default as InstagramSource,
  createRedirectSource as RedirectSource,
  SkypeSource,
  SrcSource,
  Twitter_default as TwitterSource,
  VKontakte_default as VKontakteSource,
  ValueSource,
  createAvatarComponent,
  createAvatarDataProvider,
  es_default as default,
  getRandomColor
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

is-buffer/index.js:
  (*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)
*/
//# sourceMappingURL=react-avatar.js.map
